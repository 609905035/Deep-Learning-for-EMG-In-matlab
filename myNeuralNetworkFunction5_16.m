function [Y,Xf,Af] = myNeuralNetworkFunction5_16(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 16-May-2018 16:23:34.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx1 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx6 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====
%对应的类别是 cyl,hook，lat，palm，spher，tip
% Input 1

x1_step1.xoffset = 256.218607071998;
x1_step1.gain = 0.000731999726429941;
x1_step1.ymin = -1;

% Layer 1
b1 = [28.03572004722454;-25.05229818637687;-22.098750207262327;-19.010879861438578;15.866234887634402;-12.930226958655952;9.9176307774230157;7.4008009136758659;4.8199483279579498;1.3569505507537636;-1.645074743534396;-4.4613502839003978;-7.374899225081391;10.315758417869407;-13.263161119325735;16.20894883468166;19.129404568450173;22.322099508321674;-25.072002986630299;-27.733644765943485];
IW1_1 = [-27.964281158115046;28.000261299260082;28.004966110478623;28.097322859805889;-28.196753016906744;28.149455010217455;-28.151570456414166;-27.98982574732802;-27.935026133959639;-28.003957598918316;-27.992691350043422;-27.993417933336836;-27.998627884030586;28.000006560712038;-27.999997861308895;28.001099689685866;28.021455188223516;27.825989489876005;-27.977757816920718;-28.259846343043368];

% Layer 2
b2 = [-0.77353836323430503;0.40693846815746676;-0.6398771503999513;-0.036831846730021968;0.24069412666669415;0.49431276620521136];
LW2_1 = [-0.40463121339723485 0.97351573650866596 -0.11827365631579079 0.086682367859869075 0.90633517520360207 -1.0750804910125509 1.3859832029582688 -0.064705544064545123 0.9188221050347215 -1.1210946886253432 0.22914895221861326 -0.42127923127178901 -0.44382577959928138 0.051641979253073879 -1.1124453996203554 1.0397459939987914 0.036473291992074899 0.81387903866114653 -0.84826985296200641 0.56026539385160878;0.10635824302862332 -0.014181121703168003 -0.93665483291162255 -0.37561915923744821 -0.36704489993162798 0.148423539387743 -0.05137835009183233 -0.3025005546397545 0.018898834609452783 -0.0088078250339872488 -0.56787190138438914 -0.14817619558643957 -0.12601236069258964 0.60618519766648193 -0.067540468519346822 0.55603207848072922 1.2646035564255658 0.37012147652055205 -0.85212304438681596 0.23257680392354585;0.48176196266436111 -0.52303581025765022 -0.64262832438725459 0.57099416347823173 0.54012359355844763 -0.7743584826100931 -0.72388669936464589 0.12218118145550827 -0.6441536498954884 0.50619009465074261 0.84172498112265837 0.46294385899093821 1.2885117881125201 -0.49923157762540077 0.23182894573802243 -0.31835245854231387 -0.19376713871818896 -1.6152945239703178 2.0595727616403647 1.0369722868476887;-0.27116252446014749 -0.70388823437582071 -0.61863543440807212 0.079351098317873625 -0.38127560651406744 0.18463858119400697 0.40858586061993724 0.1794877574850158 -0.2762188314745968 -0.14392379184729179 -0.063940581679658673 0.47671787060420279 0.064908944325688223 -0.73057774198133607 1.3318911243303555 0.091413271578760641 -0.78300470519770904 0.69150673851524058 -1.5130803379334279 0.59521581913172983;0.77201617216456075 0.14060043466817673 -0.45618697033890893 1.0862511853293377 0.14934805598706319 0.52309395557727156 -1.0766692449843454 -0.76767448526009541 -0.83974107233511031 -0.52254222625631608 -1.0566490687114181 -0.16730256983613057 -0.0045400955900580242 0.74565151662011475 0.24407558966192711 -0.048705209977217293 0.69475033474409131 1.321818441977846 -0.35160242159180927 0.74997265036883864;0.21739553332116876 0.7680270401930821 0.083368927673945589 0.47098541832049001 0.21358671334843207 -0.19969660106998258 0.79236514892469811 -0.28379403895380301 0.14834786162187144 -0.16130813286260967 -0.34389326376381218 0.8450062511456008 0.049807063137822925 -0.038082082318902373 0.091536539940814177 -0.94164692998033295 -0.28287097347104462 -0.28778997736413597 -1.4987847177446649 -0.65299459466974052];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
